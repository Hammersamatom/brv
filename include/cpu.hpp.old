#include <cstdint>

union c8Instr {
    //// Little Endian, so reverse order
    // Standard instruction
    struct {
        uint16_t opZ : 4;
        uint16_t opB : 4;
        uint16_t opA : 4;
        uint16_t inst : 4;
    };
    struct {
        uint16_t addr : 12;
    };
    struct {
        uint8_t lowVal;
        uint8_t highVal;
    };
    uint16_t raw;
};

class c8cpu
{
    public:
        uint16_t i_reg = 0;
        uint16_t program_counter = 0;
        uint16_t stack[16]; // Can be either 12 or 16 shorts large. Using 16 for safety.
        uint8_t v_regs[16]; // Registers V0 through VF. 8 bits wide.
    public:
        c8cpu() {}
        ~c8cpu() {}
    public:
        void step();
    private:

};